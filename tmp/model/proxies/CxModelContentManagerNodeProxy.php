<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxModelContentManagerNodeProxy extends \Cx\Model\ContentManager\Node implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setLft($lft)
    {
        $this->_load();
        return parent::setLft($lft);
    }

    public function getLft()
    {
        $this->_load();
        return parent::getLft();
    }

    public function setRgt($rgt)
    {
        $this->_load();
        return parent::setRgt($rgt);
    }

    public function getRgt()
    {
        $this->_load();
        return parent::getRgt();
    }

    public function setLvl($lvl)
    {
        $this->_load();
        return parent::setLvl($lvl);
    }

    public function getLvl()
    {
        $this->_load();
        return parent::getLvl();
    }

    public function addChildren(\Cx\Model\ContentManager\Node $children)
    {
        $this->_load();
        return parent::addChildren($children);
    }

    public function addParsedChild(\Cx\Model\ContentManager\Node $child)
    {
        $this->_load();
        return parent::addParsedChild($child);
    }

    public function getChildren()
    {
        $this->_load();
        return parent::getChildren();
    }

    public function addPages(\Cx\Model\ContentManager\Page $pages)
    {
        $this->_load();
        return parent::addPages($pages);
    }

    public function getPages()
    {
        $this->_load();
        return parent::getPages();
    }

    public function getPagesByLang()
    {
        $this->_load();
        return parent::getPagesByLang();
    }

    public function setParent(\Cx\Model\ContentManager\Node $parent)
    {
        $this->_load();
        return parent::setParent($parent);
    }

    public function getParent()
    {
        $this->_load();
        return parent::getParent();
    }

    public function addAssociatedPage($page)
    {
        $this->_load();
        return parent::addAssociatedPage($page);
    }

    public function setType($type)
    {
        $this->_load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->_load();
        return parent::getType();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function hasAccessByUserId($frontend = true)
    {
        $this->_load();
        return parent::hasAccessByUserId($frontend);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'lft', 'rgt', 'lvl', 'children', 'pages', 'parent');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}