<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxModelContentManagerPageProxy extends \Cx\Core\ContentManager\Model\Entity\Page implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setLang($lang)
    {
        $this->_load();
        return parent::setLang($lang);
    }

    public function getLang()
    {
        $this->_load();
        return parent::getLang();
    }

    public function setType($type)
    {
        $this->_load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->_load();
        return parent::getType();
    }

    public function setTitle($title)
    {
        $this->_load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->_load();
        return parent::getTitle();
    }

    public function setContent($content)
    {
        $this->_load();
        return parent::setContent($content);
    }

    public function getContent()
    {
        $this->_load();
        return parent::getContent();
    }

    public function setCustomContent($customContent)
    {
        $this->_load();
        return parent::setCustomContent($customContent);
    }

    public function getCustomContent()
    {
        $this->_load();
        return parent::getCustomContent();
    }

    public function setCssName($cssName)
    {
        $this->_load();
        return parent::setCssName($cssName);
    }

    public function getCssName()
    {
        $this->_load();
        return parent::getCssName();
    }

    public function setMetatitle($metatitle)
    {
        $this->_load();
        return parent::setMetatitle($metatitle);
    }

    public function getMetatitle()
    {
        $this->_load();
        return parent::getMetatitle();
    }

    public function setMetadesc($metadesc)
    {
        $this->_load();
        return parent::setMetadesc($metadesc);
    }

    public function getMetadesc()
    {
        $this->_load();
        return parent::getMetadesc();
    }

    public function setMetakeys($metakeys)
    {
        $this->_load();
        return parent::setMetakeys($metakeys);
    }

    public function getMetakeys()
    {
        $this->_load();
        return parent::getMetakeys();
    }

    public function setMetarobots($metarobots)
    {
        $this->_load();
        return parent::setMetarobots($metarobots);
    }

    public function getMetarobots()
    {
        $this->_load();
        return parent::getMetarobots();
    }

    public function setStart($start)
    {
        $this->_load();
        return parent::setStart($start);
    }

    public function getStart()
    {
        $this->_load();
        return parent::getStart();
    }

    public function setEnd($end)
    {
        $this->_load();
        return parent::setEnd($end);
    }

    public function getEnd()
    {
        $this->_load();
        return parent::getEnd();
    }

    public function setEditingStatus($editingStatus)
    {
        $this->_load();
        return parent::setEditingStatus($editingStatus);
    }

    public function getEditingStatus()
    {
        $this->_load();
        return parent::getEditingStatus();
    }

    public function setDisplay($display)
    {
        $this->_load();
        return parent::setDisplay($display);
    }

    public function getDisplay()
    {
        $this->_load();
        return parent::getDisplay();
    }

    public function setActive($active)
    {
        $this->_load();
        return parent::setActive($active);
    }

    public function getActive()
    {
        $this->_load();
        return parent::getActive();
    }

    public function setTarget($target)
    {
        $this->_load();
        return parent::setTarget($target);
    }

    public function getTarget()
    {
        $this->_load();
        return parent::getTarget();
    }

    public function setModule($module)
    {
        $this->_load();
        return parent::setModule($module);
    }

    public function getModule()
    {
        $this->_load();
        return parent::getModule();
    }

    public function setCmd($cmd)
    {
        $this->_load();
        return parent::setCmd($cmd);
    }

    public function getCmd()
    {
        $this->_load();
        return parent::getCmd();
    }

    public function setNode(\Cx\Core\ContentManager\Model\Entity\Node $node)
    {
        $this->_load();
        return parent::setNode($node);
    }

    public function getNode()
    {
        $this->_load();
        return parent::getNode();
    }

    public function setSkin(\Cx\Core\ContentManager\Model\Entity\Skin $skin)
    {
        $this->_load();
        return parent::setSkin($skin);
    }

    public function getSkin()
    {
        $this->_load();
        return parent::getSkin();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'lang', 'type', 'title', 'content', 'customContent', 'cssName', 'metatitle', 'metadesc', 'metakeys', 'metarobots', 'start', 'end', 'editingStatus', 'display', 'active', 'target', 'module', 'cmd', 'node', 'skin');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}