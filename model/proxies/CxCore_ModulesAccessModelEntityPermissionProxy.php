<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxCore_ModulesAccessModelEntityPermissionProxy extends \Cx\Core_Modules\Access\Model\Entity\Permission implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setAllowedProtocols($allowedProtocols)
    {
        $this->_load();
        return parent::setAllowedProtocols($allowedProtocols);
    }

    public function getAllowedProtocols()
    {
        $this->_load();
        return parent::getAllowedProtocols();
    }

    public function setAllowedMethods($allowedMethods)
    {
        $this->_load();
        return parent::setAllowedMethods($allowedMethods);
    }

    public function getAllowedMethods()
    {
        $this->_load();
        return parent::getAllowedMethods();
    }

    public function setRequiresLogin($requiresLogin)
    {
        $this->_load();
        return parent::setRequiresLogin($requiresLogin);
    }

    public function getRequiresLogin()
    {
        $this->_load();
        return parent::getRequiresLogin();
    }

    public function setValidUserGroups($validUserGroups)
    {
        $this->_load();
        return parent::setValidUserGroups($validUserGroups);
    }

    public function getValidUserGroups()
    {
        $this->_load();
        return parent::getValidUserGroups();
    }

    public function setValidAccessIds($validAccessIds)
    {
        $this->_load();
        return parent::setValidAccessIds($validAccessIds);
    }

    public function getvalidAccessIds()
    {
        $this->_load();
        return parent::getvalidAccessIds();
    }

    public function setDataAccesses(\Cx\Core\DataAccess\Model\Entity\DataAccess $dataAccesses)
    {
        $this->_load();
        return parent::setDataAccesses($dataAccesses);
    }

    public function getDataAccesses()
    {
        $this->_load();
        return parent::getDataAccesses();
    }

    public function setCallback($callback)
    {
        $this->_load();
        return parent::setCallback($callback);
    }

    public function getCallback()
    {
        $this->_load();
        return parent::getCallback();
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function hasAccess(array $params = array (
))
    {
        $this->_load();
        return parent::hasAccess($params);
    }

    public function __get($name)
    {
        $this->_load();
        return parent::__get($name);
    }

    public function getComponentController()
    {
        $this->_load();
        return parent::getComponentController();
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'allowedProtocols', 'allowedMethods', 'requiresLogin', 'validUserGroups', 'validAccessIds', 'dataAccesses');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}