<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxModulesPimModelEntityProductProxy extends \Cx\Modules\Pim\Model\Entity\Product implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->_load();
        return parent::setId($id);
    }

    public function getName()
    {
        $this->_load();
        return parent::getName();
    }

    public function setName($name)
    {
        $this->_load();
        return parent::setName($name);
    }

    public function getRenewalOptions()
    {
        $this->_load();
        return parent::getRenewalOptions();
    }

    public function setRenewalOptions($renewalOptions)
    {
        $this->_load();
        return parent::setRenewalOptions($renewalOptions);
    }

    public function getDefaultRenewalOption()
    {
        $this->_load();
        return parent::getDefaultRenewalOption();
    }

    public function setDefaultRenewalOption($defaultRenewalOption)
    {
        $this->_load();
        return parent::setDefaultRenewalOption($defaultRenewalOption);
    }

    public function getEntityClass()
    {
        $this->_load();
        return parent::getEntityClass();
    }

    public function setEntityClass($entityClass)
    {
        $this->_load();
        return parent::setEntityClass($entityClass);
    }

    public function getEntityAttributes()
    {
        $this->_load();
        return parent::getEntityAttributes();
    }

    public function setEntityAttributes($entityAttributes)
    {
        $this->_load();
        return parent::setEntityAttributes($entityAttributes);
    }

    public function getRenewable()
    {
        $this->_load();
        return parent::getRenewable();
    }

    public function isRenewable()
    {
        $this->_load();
        return parent::isRenewable();
    }

    public function setRenewable($renewable)
    {
        $this->_load();
        return parent::setRenewable($renewable);
    }

    public function getExpirable()
    {
        $this->_load();
        return parent::getExpirable();
    }

    public function isExpirable()
    {
        $this->_load();
        return parent::isExpirable();
    }

    public function setExpirable($expirable)
    {
        $this->_load();
        return parent::setExpirable($expirable);
    }

    public function getUpgradable()
    {
        $this->_load();
        return parent::getUpgradable();
    }

    public function isUpgradable()
    {
        $this->_load();
        return parent::isUpgradable();
    }

    public function setUpgradable($upgradable)
    {
        $this->_load();
        return parent::setUpgradable($upgradable);
    }

    public function getExpirationUnit()
    {
        $this->_load();
        return parent::getExpirationUnit();
    }

    public function setExpirationUnit($expirationUnit)
    {
        $this->_load();
        return parent::setExpirationUnit($expirationUnit);
    }

    public function getExpirationQuantifier()
    {
        $this->_load();
        return parent::getExpirationQuantifier();
    }

    public function setExpirationQuantifier($expirationQuantifier)
    {
        $this->_load();
        return parent::setExpirationQuantifier($expirationQuantifier);
    }

    public function getUpgradableProducts()
    {
        $this->_load();
        return parent::getUpgradableProducts();
    }

    public function setUpgradableProducts($upgradableProducts)
    {
        $this->_load();
        return parent::setUpgradableProducts($upgradableProducts);
    }

    public function getPrice()
    {
        $this->_load();
        return parent::getPrice();
    }

    public function setPrice($price)
    {
        $this->_load();
        return parent::setPrice($price);
    }

    public function getSubscriptions()
    {
        $this->_load();
        return parent::getSubscriptions();
    }

    public function setSubscriptions($subscriptions)
    {
        $this->_load();
        return parent::setSubscriptions($subscriptions);
    }

    public function getNewEntityForSale($saleOptions)
    {
        $this->_load();
        return parent::getNewEntityForSale($saleOptions);
    }

    public function getEntityById($entityId)
    {
        $this->_load();
        return parent::getEntityById($entityId);
    }

    public function getExpirationDate()
    {
        $this->_load();
        return parent::getExpirationDate();
    }

    public function getRenewalDate($unit, $quantifier)
    {
        $this->_load();
        return parent::getRenewalDate($unit, $quantifier);
    }

    public function getRenewalDefinition($unit, $quantifier)
    {
        $this->_load();
        return parent::getRenewalDefinition($unit, $quantifier);
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'entityClass', 'entityAttributes', 'renewable', 'expirable', 'upgradable', 'expirationUnit', 'expirationQuantifier', 'price', 'subscriptions');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}