<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxCore_ModulesMultiSiteModelEntityWebsiteProxy extends \Cx\Core_Modules\MultiSite\Model\Entity\Website implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function setId($id)
    {
        $this->_load();
        return parent::setId($id);
    }

    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setName($name)
    {
        $this->_load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->_load();
        return parent::getName();
    }

    public function setCodeBase($codeBase)
    {
        $this->_load();
        return parent::setCodeBase($codeBase);
    }

    public function getCodeBase()
    {
        $this->_load();
        return parent::getCodeBase();
    }

    public function setLanguage($language)
    {
        $this->_load();
        return parent::setLanguage($language);
    }

    public function getLanguage()
    {
        $this->_load();
        return parent::getLanguage();
    }

    public function setStatus($status)
    {
        $this->_load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->_load();
        return parent::getStatus();
    }

    public function setWebsiteServiceServerId($websiteServiceServerId)
    {
        $this->_load();
        return parent::setWebsiteServiceServerId($websiteServiceServerId);
    }

    public function getWebsiteServiceServerId()
    {
        $this->_load();
        return parent::getWebsiteServiceServerId();
    }

    public function setWebsiteServiceServer(\Cx\Core_Modules\MultiSite\Model\Entity\WebsiteServiceServer $websiteServiceServer)
    {
        $this->_load();
        return parent::setWebsiteServiceServer($websiteServiceServer);
    }

    public function getWebsiteServiceServer()
    {
        $this->_load();
        return parent::getWebsiteServiceServer();
    }

    public function getOwner()
    {
        $this->_load();
        return parent::getOwner();
    }

    public function setSecretKey($secretKey)
    {
        $this->_load();
        return parent::setSecretKey($secretKey);
    }

    public function getSecretKey()
    {
        $this->_load();
        return parent::getSecretKey();
    }

    public function setIpAddress($ipAddress)
    {
        $this->_load();
        return parent::setIpAddress($ipAddress);
    }

    public function getIpAddress()
    {
        $this->_load();
        return parent::getIpAddress();
    }

    public function setOwnerId($ownerId)
    {
        $this->_load();
        return parent::setOwnerId($ownerId);
    }

    public function getOwnerId()
    {
        $this->_load();
        return parent::getOwnerId();
    }

    public function setInstallationId($installationId)
    {
        $this->_load();
        return parent::setInstallationId($installationId);
    }

    public function getInstallationId()
    {
        $this->_load();
        return parent::getInstallationId();
    }

    public function setup()
    {
        $this->_load();
        return parent::setup();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function cleanup()
    {
        $this->_load();
        return parent::cleanup();
    }

    public function removeWebsite($websiteName, $silent = false)
    {
        $this->_load();
        return parent::removeWebsite($websiteName, $silent);
    }

    public function generateInstalationId()
    {
        $this->_load();
        return parent::generateInstalationId();
    }

    public function setFqdn()
    {
        $this->_load();
        return parent::setFqdn();
    }

    public function getFqdn()
    {
        $this->_load();
        return parent::getFqdn();
    }

    public function setBaseDn()
    {
        $this->_load();
        return parent::setBaseDn();
    }

    public function getBaseDn()
    {
        $this->_load();
        return parent::getBaseDn();
    }

    public function getDomainAliases()
    {
        $this->_load();
        return parent::getDomainAliases();
    }

    public function getDomains()
    {
        $this->_load();
        return parent::getDomains();
    }

    public function mapDomain(\Cx\Core_Modules\MultiSite\Model\Entity\Domain $domain)
    {
        $this->_load();
        return parent::mapDomain($domain);
    }

    public function unmapDomain($name)
    {
        $this->_load();
        return parent::unmapDomain($name);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'language', 'status', 'websiteServiceServerId', 'secretKey', 'ipAddress', 'ownerId', 'installationId', 'domains', 'websiteServiceServer');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}