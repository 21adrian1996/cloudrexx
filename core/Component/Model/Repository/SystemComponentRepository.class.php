<?php

namespace Cx\Core\Component\Model\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SystemComponentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SystemComponentRepository extends EntityRepository
{
    protected $loadedComponents = array();
    protected $cx = null;
    
    public function __construct($em, \Doctrine\ORM\Mapping\ClassMetadata $class) {
        parent::__construct($em, $class);
        $this->cx = \Env::get('cx');
    }
    
    public function find($id, $lockMode = LockMode::NONE, $lockVersion = null) {
        return $this->decorate(parent::find($id, $lockMode, $lockVersion));
    }
    
    public function findAll() {
        return $this->decorate(parent::findAll());
    }
    
    public function findBy(array $criteria) {
        return $this->decorate(parent::findBy($criteria));
    }
    
    public function findOneBy(array $criteria) {
        return $this->decorate(parent::findOneBy($criteria));
    }
    
    protected function decorate($components) {
        if (!$components) {
            return $components;
        }
        if (!is_array($components)) {
            return $this->decorateEntity($components);
        }
        foreach ($components as &$component) {
            if (isset($this->loadedComponents[$component->getId()])) {
                $component = $this->loadedComponents[$component->getId()];
                continue;
            }
            $component = $this->decorateEntity($component);
        }
        return $components;
    }
    
    protected function decorateEntity(\Cx\Core\Component\Model\Entity\SystemComponent $component) {
        if (isset($this->loadedComponents[$component->getId()])) {
            return $this->loadedComponents[$component->getId()];
        }
        $componentControllerClass = $this->getComponentControllerClassFor($component);
        $componentController = new $componentControllerClass($component);
        $this->loadedComponents[$component->getId()] = $componentController;
        return $componentController;
    }
    
    protected function getComponentControllerClassFor(\Cx\Core\Component\Model\Entity\SystemComponent $component) {
        $className = '\\Cx';
        switch ($component->getType()) {
            case \Cx\Core\Component\Model\Entity\SystemComponent::TYPE_CORE:
                $className .= '\\Core';
                break;
            case \Cx\Core\Component\Model\Entity\SystemComponent::TYPE_CORE_MODULE:
                $className .= '\\Core_Modules';
                break;
            case \Cx\Core\Component\Model\Entity\SystemComponent::TYPE_MODULE:
                $className .= '\\Modules';
                break;
            default:
                throw new \Cx\Core\Component\Controller\ComponentException('No such component type: "' . $component->getType() . '"');
        }
        $className .= '\\' . $component->getName() . '\\Controller\\ComponentController';
        return $className;
    }
    
    public function callPreResolveHooks() {
        foreach ($this->findAll() as $component) {
            $component->preResolve($this->cx, $this->cx->getRequest());
        }
    }
    
    public function callPostResolveHooks() {
        foreach ($this->findAll() as $component) {
            $component->postResolve($this->cx, $this->cx->getPage());
        }
    }
    
    public function callPreContentLoadHooks() {
        foreach ($this->findAll() as $component) {
            $component->preContentLoad($this->cx, $this->cx->getPage());
        }
    }
    
    // NEW
    public function callPreContentParseHooks() {
        foreach ($this->findAll() as $component) {
            $component->preContentParse($this->cx, $this->cx->getPage());
        }
    }
    
    public function loadComponent($componentName) {
        $this->findOneBy(array('name'=>$componentName))->load($this->cx, $this->cx->getPage());
    }
    
    // NEW
    public function callPostContentParseHooks() {
        foreach ($this->findAll() as $component) {
            $component->postContentParse($this->cx, $this->cx-getPage());
        }
    }
    
    public function callPostContentLoadHooks() {
        foreach ($this->findAll() as $component) {
            $component->postContentLoad($this->cx, $this->cx->getPage());
        }
    }
    
    // NEW
    public function callPreFinalizeHooks() {
        foreach ($this->findAll() as $component) {
            $component->preFinalize($this->cx, $this->cx->getTemplate());
        }
    }
    
    // NEW
    public function callPostFinalizeHooks() {
        foreach ($this->findAll() as $component) {
            $component->postFinalize($this->cx);
        }
    }
}